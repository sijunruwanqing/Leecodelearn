cpp solution:
定义两个指针 i,j(i<=j)i,j(i<=j)，表示当前扫描到的子串是 [i,j][i,j] (闭区间)。
扫描过程中维护一个哈希表unordered_map<char,int> hash，表示 [i,j][i,j]中每个字符出现的次数。
线性扫描de 循环的流程如下：

指针 jj 向后移一位, 同时将哈希表中 s[j]s[j] 的计数加一: hash[s[j]]++;
假设 jj 移动前的区间 [i,j][i,j] 中没有重复字符，则 jj 移动后，只有 s[j]s[j] 可能出现2次。因此我们不断向后移动 ii，直至区间 [i,j][i,j]中 s[j]s[j] 的个数等于1为止；
复杂度分析：由于 i,ji,j 均最多增加n次，且哈希表的插入和更新操作的复杂度都是 O(1)O(1)，因此，总时间复杂度 O(n)O(n).
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> hash;
        int res = 0;
        for (int i = 0, j = 0; j < s.size(); j ++ )
        {
            if ( ++ hash[s[j]] > 1)
            {
                while (i < j)
                {
                    hash[s[i]]--;
                    i ++ ;
                    if (hash[s[j]] == 1) break;
                }
            }
            res = max(res, j - i + 1);
        }
        return res;
    }
};


java solution:

使用哈希集来跟踪最长的子字符串而不重复字符到目前为止，
使用快速指针j查看字符j是否在哈希集中，如果不是，
则将其添加到哈希集，移动j 转发并更新最大长度，
否则，使用慢指针i从头部删除，直到我们可以将字符j放入哈希集。


public int lengthOfLongestSubstring(String s) {
    int i = 0, j = 0, max = 0;
    Set<Character> set = new HashSet<>();
    
    while (j < s.length()) {
        if (!set.contains(s.charAt(j))) {
            set.add(s.charAt(j++));
            max = Math.max(max, set.size());
        } else {
            set.remove(s.charAt(i++));
        }
    }
    
    return max;
}