cpp  高精度乘法，模拟法
     竖式乘法为两层循环错位相乘，故时间按复杂度是O(nm)：

class Solution {
public:
    string multiply(string num1, string num2) {
        int n = num1.length(), m = num2.length();
        vector<int> a(n), b(m), c(n + m);
        for (int i = 0; i < n; i++)
            a[n - i - 1] = num1[i] - '0';
        for (int i = 0; i < m; i++)
            b[m - i - 1] = num2[i] - '0';

        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++) {
                c[i + j] += a[i] * b[j];
                c[i + j + 1] += c[i + j] / 10;
                c[i + j] %= 10;
            }

        int l = n + m;
        while (l > 1 && c[l - 1] == 0) l--;
        string ans = "";
        for (int i = l - 1; i >= 0; i--)
            ans += c[i] + '0';
        return ans;
    }
};


java 图的理论和解释:

	public String multiply(String num1, String num2) {
    int m = num1.length();
	int n = num2.length();
    int[] pos = new int[m + n];
   
    for(int i = m - 1; i >= 0; i--) {
        for(int j = n - 1; j >= 0; j--) {
            int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0'); 
            int p1 = i + j, p2 = i + j + 1;
            int sum = mul + pos[p2];

            pos[p1] += sum / 10;
            pos[p2] = (sum) % 10;
        }
    }  
    
    StringBuilder sb = new StringBuilder();
    for(int p : pos)
	if(!(sb.length() == 0 && p == 0)) 
	sb.append(p);
    return sb.length() == 0 ? "0" : sb.toString();
}
