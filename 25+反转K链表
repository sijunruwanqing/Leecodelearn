cpp:


class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* dummy = new ListNode(0);
        dummy -> next = head;
        ListNode* cur = dummy;

        while (cur != NULL) {
            ListNode *first = cur -> next;
            ListNode *end = cur;

            for (int i = 0; i < k && end != NULL; i++)
                end = end -> next;

            if (end == NULL)
                break;

            ListNode *p1 = first;
            ListNode *p2 = first -> next;
            while (p1 != end) {
                ListNode *new_p2 = p2 -> next;
                p2 -> next = p1;
                p1 = p2;
                p2 = new_p2;
            }

            first -> next = p2;
            cur -> next = end;
            cur = first;
        }
        return dummy -> next;
    }
};


java:
public ListNode reverseKGroup(ListNode head, int k) {
    ListNode begin;
    if (head==null || head.next ==null || k==1)
    	return head;
    ListNode dummyhead = new ListNode(-1);
    dummyhead.next = head;
    begin = dummyhead;
    int i=0;
    while (head != null){
    	i++;
    	if (i%k == 0){
    		begin = reverse(begin, head.next);
    		head = begin.next;
    	} else {
    		head = head.next;
    	}
    }
    return dummyhead.next;
    
}

public ListNode reverse(ListNode begin, ListNode end){
	ListNode curr = begin.next;
	ListNode next, first;
	ListNode prev = begin;
	first = curr;
	while (curr!=end){
		next = curr.next;
		curr.next = prev;
		prev = curr;
		curr = next;
	}
	begin.next = prev;
	first.next = curr;
	return first;
}
